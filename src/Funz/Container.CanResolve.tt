<#@ Template Debug="false" HostSpecific="false" Language="C#" #>
<#@ Output Extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.Linq" #>
using System;
using System.Diagnostics;

namespace Jwc.Funz
{
    public partial class Container
    {
        /* Contain just the typed overloads that are just pass-through to the real implementations.
         * They all have DebuggerStepThrough to ease debugging. */

<#
for (var typeCount = 2; typeCount <= GenericTypeMax - 2; typeCount++)
{
    var typeList = GetGenericList(typeCount, "TArg{0}");
#>
        /// <summary>
        /// Determines whether this container can resolve a service of the type or not.
        /// </summary>
        /// <returns>
        /// The result whether this container can resolve.
        /// </returns>
		[System.Diagnostics.CodeAnalysis.SuppressMessage(
            "Microsoft.Design",
            "CA1004:GenericMethodsShouldProvideTypeParameter")]
		[DebuggerStepThrough]
        public bool CanResolve<TService, <#=typeList#>>()
        {
            return CanResolveImpl<Func<Container, <#=typeList#>, TService>, TService>(_noKey);
        }

		/// <summary>
        /// Determines whether this container can resolve a service of the type with the key or not.
        /// </summary>
        /// <returns>
        /// The result whether this container can resolve.
        /// </returns>
		[System.Diagnostics.CodeAnalysis.SuppressMessage(
            "Microsoft.Design",
            "CA1004:GenericMethodsShouldProvideTypeParameter")]
		[DebuggerStepThrough]
        public bool CanResolveKeyed<TService, <#=typeList#>>(object key)
        {
            return CanResolveImpl<Func<Container, <#=typeList#>, TService>, TService>(key);
        }

<#
}
#>
    }
}
<#@ Include File="Helpers.tt" #>