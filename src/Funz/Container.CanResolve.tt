<#@ Template Debug="false" HostSpecific="false" Language="C#" #>
<#@ Output Extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.Linq" #>
using System;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;

namespace Jwc.Funz
{
    /// <summary>
    /// Main container class for components, supporting container hierarchies and
    /// lifetime management of <see cref="IDisposable" /> instances.
    /// </summary>
    [SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1508:ClosingCurlyBracketsMustNotBePrecededByBlankLine", Justification = "The last line is automatically generated.")]
    [SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1618:GenericTypeParametersMustBeDocumented", Justification = "Suppressing this rule is desirable.")]
    [SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1611:ElementParametersMustBeDocumented", Justification = "Suppressing this rule is desirable.")]
    public partial class Container
    {
        /* Contain just the typed overloads that are just pass-through to the real implementations.
         * They all have DebuggerStepThrough to ease debugging. */

<#
for (var typeCount = 2; typeCount <= GenericTypeMax - 2; typeCount++)
{
    var typeList = GetGenericList(typeCount, "TArg{0}");
#>
        /// <summary>
        /// Determines whether this container can resolve a service of the type or not.
        /// </summary>
        /// <returns>
        /// The result whether this container can resolve.
        /// </returns>
        [DebuggerStepThrough]
        [SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter", Justification = "The generic types are to provide information of explicit types.")]
        public bool CanResolve<TService, <#=typeList#>>()
        {
            return CanResolveImpl<Func<Container, <#=typeList#>, TService>, TService>(NoKey);
        }

        /// <summary>
        /// Determines whether this container can resolve a service of the type with the key or not.
        /// </summary>
        /// <returns>
        /// The result whether this container can resolve.
        /// </returns>
        [DebuggerStepThrough]
        [SuppressMessage("Microsoft.Design", "CA1004:GenericMethodsShouldProvideTypeParameter", Justification = "The generic types are to provide information of explicit types.")]
        public bool CanResolveKeyed<TService, <#=typeList#>>(object key)
        {
            return CanResolveImpl<Func<Container, <#=typeList#>, TService>, TService>(key);
        }

<#
}
#>
    }
}
<#@ Include File="Helpers.tt" #>