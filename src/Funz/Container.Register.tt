<#@ Template Debug="false" HostSpecific="false" Language="C#" #>
<#@ Output Extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.Linq" #>
using System;
using System.Diagnostics;

namespace Jwc.Funz
{
	public partial class Container
	{
		/* Contain just the typed overloads that are just pass-through to the real implementations.
		 * They all have DebuggerStepThrough to ease debugging. */

<#
for (var typeCount = 2; typeCount <= GenericTypeMax - 2; typeCount++)
{
    var typeList = GetGenericList(typeCount, "TArg{0}");
#>
		/// <summary>
        /// Registers the given service by providing a factory delegate to instantiate it.
        /// </summary>
        /// <param name="factory">
        /// The factory delegate to initialize new instances of the service when needed.
        /// </param>
        /// <returns>
        /// The registration object to perform further configuration via its fluent interface.
        /// </returns>
		[DebuggerStepThrough]
		public IRegistration Register<TService, <#=typeList #>>(Func<Container, <#=typeList #>, TService> factory)
		{
			return RegisterImpl<Func<Container, <#=typeList #>, TService>, TService>(_noKey, factory);
		}

		/// <summary>
        /// Registers the given service by providing a factory delegate to instantiate it.
        /// </summary>
        /// <param name="key">
        /// A key used to differenciate this service registration.
        /// </param>
        /// <param name="factory">
        /// The factory delegate to initialize new instances of the service when needed.
        /// </param>
        /// <returns>
        /// The registration object to perform further configuration via its fluent interface.
        /// </returns>
		[DebuggerStepThrough]
		public IRegistration Register<TService, <#=typeList #>>(object key, Func<Container, <#=typeList #>, TService> factory)
		{
			return RegisterImpl<Func<Container, <#=typeList #>, TService>, TService>(key, factory);
		}

<#
}
#>
	}
}
<#@ Include File="Helpers.tt" #>