<#@ Template Debug="false" HostSpecific="false" Language="C#" #>
<#@ Output Extension=".cs" #>
<#@ Assembly Name="System.Core" #>
<#@ Import Namespace="System.Linq" #>
using System;
using System.Diagnostics.CodeAnalysis;

namespace Jwc.Funz
{
    /// <summary>
    /// Main container class for components, supporting container hierarchies and
    /// lifetime management of <see cref="IDisposable" /> instances.
    /// </summary>
    [SuppressMessage("StyleCop.CSharp.LayoutRules", "SA1508:ClosingCurlyBracketsMustNotBePrecededByBlankLine", Justification = "The last line is automatically generated.")]
    [SuppressMessage("StyleCop.CSharp.DocumentationRules", "SA1618:GenericTypeParametersMustBeDocumented", Justification = "Suppressing this rule is desirable.")]
    public partial class Container
    {
        /* All ResolveImpl are essentially equal, except for the type of the factory 
         * which is "hardcoded" in each implementation. This slight repetition of 
         * code gives us a bit more of perf. gain by avoiding an intermediate 
         * func/lambda to call in a generic way as we did before.
         */

<#
for (var typeCount = 2; typeCount <= GenericTypeMax - 2; typeCount++)
{
    var typeList = GetGenericList(typeCount, "TArg{0}");
    var argumentList = GetGenericList(typeCount, "TArg{0} arg{0}");
    var valueList = GetGenericList(typeCount, "arg{0}");
#>
        private TService ResolveImpl<TService, <#=typeList#>>(object key, bool throws, <#=argumentList#>)
        {
            var serviceKey = new ServiceKey(typeof(Func<Container, <#=typeList#>, TService>), key);
            var registration = GetRegistration<Func<Container, <#=typeList#>, TService>, TService>(serviceKey, throws);
            if (registration == null)
                return default(TService);

            if (registration.HasService)
                return registration.Service;

            using (RecursionGuard.Inspect(serviceKey))
            {
                var service = registration.Factory.Invoke(this, <#=valueList#>);
                registration.Service = service;
                return service;
            }
        }

<#
}
#>
    }
}
<#@ Include File="Helpers.tt" #>